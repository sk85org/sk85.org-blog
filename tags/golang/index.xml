<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on d.sk85.org</title><link>/tags/golang/</link><description>Recent content in Golang on d.sk85.org</description><generator>Hugo 0.125.2</generator><language>ja</language><lastBuildDate>Sun, 27 Nov 2022 12:23:42 +0900</lastBuildDate><atom:link href="/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>goのエラー処理</title><link>/posts/2020/02/12/880385/</link><pubDate>Wed, 12 Feb 2020 13:23:38 +0900</pubDate><guid>/posts/2020/02/12/880385/</guid><description>goはerrorインターフェイスを持っている、
type error interface { Error() string } よく見る例としてError()関数を実装すれば、独自のerrorを作ることができる。
https://play.golang.org/p/cO0-r95Hd_r
package main import ( &amp;#34;fmt&amp;#34; ) type Error struct { Msg string Code int } func (err *Error) Error() string { return fmt.Sprintf(&amp;#34;ErrorMessage [%s], ErrorCode [%d]&amp;#34;, err.Msg, err.Code) } func test() error { return &amp;amp;Error{Msg: &amp;#34;file not found&amp;#34;, Code: 2} } func main() { if err := test(); err != nil { fmt.Println(err) } } ここでError()関数はどうやって実行されているか疑問に思って調べてみると こんな記述が
The fmt package formats an error value by calling its Error() string method.</description></item></channel></rss>